Ö§Name•redisßVersion•0.1.0©TemplatesÅ≠example.nomad≈G$IyBUaGVyZSBjYW4gb25seSBiZSBhIHNpbmdsZSBqb2IgZGVmaW5pdGlvbiBwZXIgZmlsZS4gVGhpcyBqb2IgaXMgbmFtZWQKIyAiZXhhbXBsZSIgc28gaXQgd2lsbCBjcmVhdGUgYSBqb2Igd2l0aCB0aGUgSUQgYW5kIE5hbWUgImV4YW1wbGUiLgoKIyBUaGUgImpvYiIgc3RhbnphIGlzIHRoZSB0b3AtbW9zdCBjb25maWd1cmF0aW9uIG9wdGlvbiBpbiB0aGUgam9iCiMgc3BlY2lmaWNhdGlvbi4gQSBqb2IgaXMgYSBkZWNsYXJhdGl2ZSBzcGVjaWZpY2F0aW9uIG9mIHRhc2tzIHRoYXQgTm9tYWQKIyBzaG91bGQgcnVuLiBKb2JzIGhhdmUgYSBnbG9iYWxseSB1bmlxdWUgbmFtZSwgb25lIG9yIG1hbnkgdGFzayBncm91cHMsIHdoaWNoCiMgYXJlIHRoZW1zZWx2ZXMgY29sbGVjdGlvbnMgb2Ygb25lIG9yIG1hbnkgdGFza3MuCiMKIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMgb24gdGhlICJqb2IiIHN0YW56YSwgcGxlYXNlIHNlZQojIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbiBhdDoKIwojICAgICBodHRwczovL3d3dy5ub21hZHByb2plY3QuaW8vZG9jcy9qb2Itc3BlY2lmaWNhdGlvbi9qb2IuaHRtbAojCmpvYiAiZXhhbXBsZSIgewogICMgVGhlICJyZWdpb24iIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIHJlZ2lvbiBpbiB3aGljaCB0byBleGVjdXRlIHRoZSBqb2IuCiAgIyBJZiBvbWl0dGVkLCB0aGlzIGluaGVyaXRzIHRoZSBkZWZhdWx0IHJlZ2lvbiBuYW1lIG9mICJnbG9iYWwiLgogICMgcmVnaW9uID0gImdsb2JhbCIKICAjCiAgIyBUaGUgImRhdGFjZW50ZXJzIiBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBsaXN0IG9mIGRhdGFjZW50ZXJzIHdoaWNoIHNob3VsZAogICMgYmUgY29uc2lkZXJlZCB3aGVuIHBsYWNpbmcgdGhpcyB0YXNrLiBUaGlzIG11c3QgYmUgcHJvdmlkZWQuCiAgZGF0YWNlbnRlcnMgPSB7eyAuZGF0YWNlbnRlcnMgfX0KCiAgIyBUaGUgInR5cGUiIHBhcmFtZXRlciBjb250cm9scyB0aGUgdHlwZSBvZiBqb2IsIHdoaWNoIGltcGFjdHMgdGhlIHNjaGVkdWxlcidzCiAgIyBkZWNpc2lvbiBvbiBwbGFjZW1lbnQuIFRoaXMgY29uZmlndXJhdGlvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8KICAjICJzZXJ2aWNlIi4gRm9yIGEgZnVsbCBsaXN0IG9mIGpvYiB0eXBlcyBhbmQgdGhlaXIgZGlmZmVyZW5jZXMsIHBsZWFzZSBzZWUKICAjIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbi4KICAjCiAgIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHNlZSB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgIwogICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYnNwZWMvc2NoZWR1bGVycy5odG1sCiAgIwogIHR5cGUgPSAic2VydmljZSIKCiAgIyBUaGUgImNvbnN0cmFpbnQiIHN0YW56YSBkZWZpbmVzIGFkZGl0aW9uYWwgY29uc3RyYWludHMgZm9yIHBsYWNpbmcgdGhpcyBqb2IsCiAgIyBpbiBhZGRpdGlvbiB0byBhbnkgcmVzb3VyY2Ugb3IgZHJpdmVyIGNvbnN0cmFpbnRzLiBUaGlzIHN0YW56YSBtYXkgYmUgcGxhY2VkCiAgIyBhdCB0aGUgImpvYiIsICJncm91cCIsIG9yICJ0YXNrIiBsZXZlbCwgYW5kIHN1cHBvcnRzIHZhcmlhYmxlIGludGVycG9sYXRpb24uCiAgIwogICMgRm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzIG9uIHRoZSAiY29uc3RyYWludCIgc3RhbnphLCBwbGVhc2Ugc2VlCiAgIyB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgIwogICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL2NvbnN0cmFpbnQuaHRtbAogICMKICAjIGNvbnN0cmFpbnQgewogICMgICBhdHRyaWJ1dGUgPSAiJHthdHRyLmtlcm5lbC5uYW1lfSIKICAjICAgdmFsdWUgICAgID0gImxpbnV4IgogICMgfQoKICAjIFRoZSAidXBkYXRlIiBzdGFuemEgc3BlY2lmaWVzIHRoZSB1cGRhdGUgc3RyYXRlZ3kgb2YgdGFzayBncm91cHMuIFRoZSB1cGRhdGUKICAjIHN0cmF0ZWd5IGlzIHVzZWQgdG8gY29udHJvbCB0aGluZ3MgbGlrZSByb2xsaW5nIHVwZ3JhZGVzLCBjYW5hcmllcywgYW5kCiAgIyBibHVlL2dyZWVuIGRlcGxveW1lbnRzLiBJZiBvbWl0dGVkLCBubyB1cGRhdGUgc3RyYXRlZ3kgaXMgZW5mb3JjZWQuIFRoZQogICMgInVwZGF0ZSIgc3RhbnphIG1heSBiZSBwbGFjZWQgYXQgdGhlIGpvYiBvciB0YXNrIGdyb3VwLiBXaGVuIHBsYWNlZCBhdCB0aGUKICAjIGpvYiwgaXQgYXBwbGllcyB0byBhbGwgZ3JvdXBzIHdpdGhpbiB0aGUgam9iLiBXaGVuIHBsYWNlZCBhdCBib3RoIHRoZSBqb2IgYW5kCiAgIyBncm91cCBsZXZlbCwgdGhlIHN0YW56YXMgYXJlIG1lcmdlZCB3aXRoIHRoZSBncm91cCdzIHRha2luZyBwcmVjZWRlbmNlLgogICMKICAjIEZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcyBvbiB0aGUgInVwZGF0ZSIgc3RhbnphLCBwbGVhc2Ugc2VlCiAgIyB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgIwogICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL3VwZGF0ZS5odG1sCiAgIwogIHVwZGF0ZSB7CiAgICAjIFRoZSAibWF4X3BhcmFsbGVsIiBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB1cGRhdGVzIHRvCiAgICAjIHBlcmZvcm0gaW4gcGFyYWxsZWwuIEluIHRoaXMgY2FzZSwgdGhpcyBzcGVjaWZpZXMgdG8gdXBkYXRlIGEgc2luZ2xlIHRhc2sKICAgICMgYXQgYSB0aW1lLgogICAgbWF4X3BhcmFsbGVsID0gMQoKICAgICMgVGhlICJtaW5faGVhbHRoeV90aW1lIiBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBtaW5pbXVtIHRpbWUgdGhlIGFsbG9jYXRpb24KICAgICMgbXVzdCBiZSBpbiB0aGUgaGVhbHRoeSBzdGF0ZSBiZWZvcmUgaXQgaXMgbWFya2VkIGFzIGhlYWx0aHkgYW5kIHVuYmxvY2tzCiAgICAjIGZ1cnRoZXIgYWxsb2NhdGlvbnMgZnJvbSBiZWluZyB1cGRhdGVkLgogICAgbWluX2hlYWx0aHlfdGltZSA9ICIxMHMiCgogICAgIyBUaGUgImhlYWx0aHlfZGVhZGxpbmUiIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIGRlYWRsaW5lIGluIHdoaWNoIHRoZQogICAgIyBhbGxvY2F0aW9uIG11c3QgYmUgbWFya2VkIGFzIGhlYWx0aHkgYWZ0ZXIgd2hpY2ggdGhlIGFsbG9jYXRpb24gaXMKICAgICMgYXV0b21hdGljYWxseSB0cmFuc2l0aW9uZWQgdG8gdW5oZWFsdGh5LiBUcmFuc2l0aW9uaW5nIHRvIHVuaGVhbHRoeSB3aWxsCiAgICAjIGZhaWwgdGhlIGRlcGxveW1lbnQgYW5kIHBvdGVudGlhbGx5IHJvbGwgYmFjayB0aGUgam9iIGlmICJhdXRvX3JldmVydCIgaXMKICAgICMgc2V0IHRvIHRydWUuCiAgICBoZWFsdGh5X2RlYWRsaW5lID0gIjNtIgoKICAgICMgVGhlICJwcm9ncmVzc19kZWFkbGluZSIgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgZGVhZGxpbmUgaW4gd2hpY2ggYW4KICAgICMgYWxsb2NhdGlvbiBtdXN0IGJlIG1hcmtlZCBhcyBoZWFsdGh5LiBUaGUgZGVhZGxpbmUgYmVnaW5zIHdoZW4gdGhlIGZpcnN0CiAgICAjIGFsbG9jYXRpb24gZm9yIHRoZSBkZXBsb3ltZW50IGlzIGNyZWF0ZWQgYW5kIGlzIHJlc2V0IHdoZW5ldmVyIGFuIGFsbG9jYXRpb24KICAgICMgYXMgcGFydCBvZiB0aGUgZGVwbG95bWVudCB0cmFuc2l0aW9ucyB0byBhIGhlYWx0aHkgc3RhdGUuIElmIG5vIGFsbG9jYXRpb24KICAgICMgdHJhbnNpdGlvbnMgdG8gdGhlIGhlYWx0aHkgc3RhdGUgYmVmb3JlIHRoZSBwcm9ncmVzcyBkZWFkbGluZSwgdGhlCiAgICAjIGRlcGxveW1lbnQgaXMgbWFya2VkIGFzIGZhaWxlZC4KICAgIHByb2dyZXNzX2RlYWRsaW5lID0gIjEwbSIKCiAgICAjIFRoZSAiYXV0b19yZXZlcnQiIHBhcmFtZXRlciBzcGVjaWZpZXMgaWYgdGhlIGpvYiBzaG91bGQgYXV0by1yZXZlcnQgdG8gdGhlCiAgICAjIGxhc3Qgc3RhYmxlIGpvYiBvbiBkZXBsb3ltZW50IGZhaWx1cmUuIEEgam9iIGlzIG1hcmtlZCBhcyBzdGFibGUgaWYgYWxsIHRoZQogICAgIyBhbGxvY2F0aW9ucyBhcyBwYXJ0IG9mIGl0cyBkZXBsb3ltZW50IHdlcmUgbWFya2VkIGhlYWx0aHkuCiAgICBhdXRvX3JldmVydCA9IGZhbHNlCgogICAgIyBUaGUgImNhbmFyeSIgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGF0IGNoYW5nZXMgdG8gdGhlIGpvYiB0aGF0IHdvdWxkIHJlc3VsdAogICAgIyBpbiBkZXN0cnVjdGl2ZSB1cGRhdGVzIHNob3VsZCBjcmVhdGUgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgY2FuYXJpZXMKICAgICMgd2l0aG91dCBzdG9wcGluZyBhbnkgcHJldmlvdXMgYWxsb2NhdGlvbnMuIE9uY2UgdGhlIG9wZXJhdG9yIGRldGVybWluZXMgdGhlCiAgICAjIGNhbmFyaWVzIGFyZSBoZWFsdGh5LCB0aGV5IGNhbiBiZSBwcm9tb3RlZCB3aGljaCB1bmJsb2NrcyBhIHJvbGxpbmcgdXBkYXRlCiAgICAjIG9mIHRoZSByZW1haW5pbmcgYWxsb2NhdGlvbnMgYXQgYSByYXRlIG9mICJtYXhfcGFyYWxsZWwiLgogICAgIwogICAgIyBGdXJ0aGVyLCBzZXR0aW5nICJjYW5hcnkiIGVxdWFsIHRvIHRoZSBjb3VudCBvZiB0aGUgdGFzayBncm91cCBhbGxvd3MKICAgICMgYmx1ZS9ncmVlbiBkZXBsb3ltZW50cy4gV2hlbiB0aGUgam9iIGlzIHVwZGF0ZWQsIGEgZnVsbCBzZXQgb2YgdGhlIG5ldwogICAgIyB2ZXJzaW9uIGlzIGRlcGxveWVkIGFuZCB1cG9uIHByb21vdGlvbiB0aGUgb2xkIHZlcnNpb24gaXMgc3RvcHBlZC4KICAgIGNhbmFyeSA9IDAKICB9CiAgIyBUaGUgbWlncmF0ZSBzdGFuemEgc3BlY2lmaWVzIHRoZSBncm91cCdzIHN0cmF0ZWd5IGZvciBtaWdyYXRpbmcgb2ZmIG9mCiAgIyBkcmFpbmluZyBub2Rlcy4gSWYgb21pdHRlZCwgYSBkZWZhdWx0IG1pZ3JhdGlvbiBzdHJhdGVneSBpcyBhcHBsaWVkLgogICMKICAjIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSAibWlncmF0ZSIgc3RhbnphLCBwbGVhc2Ugc2VlCiAgIyB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgIwogICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL21pZ3JhdGUuaHRtbAogICMKICBtaWdyYXRlIHsKICAgICMgU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgdGFzayBncm91cHMgdGhhdCBjYW4gYmUgbWlncmF0ZWQgYXQgdGhlIHNhbWUKICAgICMgdGltZS4gVGhpcyBudW1iZXIgbXVzdCBiZSBsZXNzIHRoYW4gdGhlIHRvdGFsIGNvdW50IGZvciB0aGUgZ3JvdXAgYXMKICAgICMgKGNvdW50IC0gbWF4X3BhcmFsbGVsKSB3aWxsIGJlIGxlZnQgcnVubmluZyBkdXJpbmcgbWlncmF0aW9ucy4KICAgIG1heF9wYXJhbGxlbCA9IDEKCiAgICAjIFNwZWNpZmllcyB0aGUgbWVjaGFuaXNtIGluIHdoaWNoIGFsbG9jYXRpb25zIGhlYWx0aCBpcyBkZXRlcm1pbmVkLiBUaGUKICAgICMgcG90ZW50aWFsIHZhbHVlcyBhcmUgImNoZWNrcyIgb3IgInRhc2tfc3RhdGVzIi4KICAgIGhlYWx0aF9jaGVjayA9ICJjaGVja3MiCgogICAgIyBTcGVjaWZpZXMgdGhlIG1pbmltdW0gdGltZSB0aGUgYWxsb2NhdGlvbiBtdXN0IGJlIGluIHRoZSBoZWFsdGh5IHN0YXRlCiAgICAjIGJlZm9yZSBpdCBpcyBtYXJrZWQgYXMgaGVhbHRoeSBhbmQgdW5ibG9ja3MgZnVydGhlciBhbGxvY2F0aW9ucyBmcm9tIGJlaW5nCiAgICAjIG1pZ3JhdGVkLiBUaGlzIGlzIHNwZWNpZmllZCB1c2luZyBhIGxhYmVsIHN1ZmZpeCBsaWtlICIzMHMiIG9yICIxNW0iLgogICAgbWluX2hlYWx0aHlfdGltZSA9ICIxMHMiCgogICAgIyBTcGVjaWZpZXMgdGhlIGRlYWRsaW5lIGluIHdoaWNoIHRoZSBhbGxvY2F0aW9uIG11c3QgYmUgbWFya2VkIGFzIGhlYWx0aHkKICAgICMgYWZ0ZXIgd2hpY2ggdGhlIGFsbG9jYXRpb24gaXMgYXV0b21hdGljYWxseSB0cmFuc2l0aW9uZWQgdG8gdW5oZWFsdGh5LiBUaGlzCiAgICAjIGlzIHNwZWNpZmllZCB1c2luZyBhIGxhYmVsIHN1ZmZpeCBsaWtlICIybSIgb3IgIjFoIi4KICAgIGhlYWx0aHlfZGVhZGxpbmUgPSAiNW0iCiAgfQogICMgVGhlICJncm91cCIgc3RhbnphIGRlZmluZXMgYSBzZXJpZXMgb2YgdGFza3MgdGhhdCBzaG91bGQgYmUgY28tbG9jYXRlZCBvbgogICMgdGhlIHNhbWUgTm9tYWQgY2xpZW50LiBBbnkgdGFzayB3aXRoaW4gYSBncm91cCB3aWxsIGJlIHBsYWNlZCBvbiB0aGUgc2FtZQogICMgY2xpZW50LgogICMKICAjIEZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcyBvbiB0aGUgImdyb3VwIiBzdGFuemEsIHBsZWFzZSBzZWUKICAjIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbiBhdDoKICAjCiAgIyAgICAgaHR0cHM6Ly93d3cubm9tYWRwcm9qZWN0LmlvL2RvY3Mvam9iLXNwZWNpZmljYXRpb24vZ3JvdXAuaHRtbAogICMKICBncm91cCAiY2FjaGUiIHsKICAgICMgVGhlICJjb3VudCIgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIHRoZSB0YXNrIGdyb3VwcyB0aGF0IHNob3VsZAogICAgIyBiZSBydW5uaW5nIHVuZGVyIHRoaXMgZ3JvdXAuIFRoaXMgdmFsdWUgbXVzdCBiZSBub24tbmVnYXRpdmUgYW5kIGRlZmF1bHRzCiAgICAjIHRvIDEuCiAgICBjb3VudCA9IDEKCiAgICAjIFRoZSAicmVzdGFydCIgc3RhbnphIGNvbmZpZ3VyZXMgYSBncm91cCdzIGJlaGF2aW9yIG9uIHRhc2sgZmFpbHVyZS4gSWYKICAgICMgbGVmdCB1bnNwZWNpZmllZCwgYSBkZWZhdWx0IHJlc3RhcnQgcG9saWN5IGlzIHVzZWQgYmFzZWQgb24gdGhlIGpvYiB0eXBlLgogICAgIwogICAgIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMgb24gdGhlICJyZXN0YXJ0IiBzdGFuemEsIHBsZWFzZSBzZWUKICAgICMgdGhlIG9ubGluZSBkb2N1bWVudGF0aW9uIGF0OgogICAgIwogICAgIyAgICAgaHR0cHM6Ly93d3cubm9tYWRwcm9qZWN0LmlvL2RvY3Mvam9iLXNwZWNpZmljYXRpb24vcmVzdGFydC5odG1sCiAgICAjCiAgICByZXN0YXJ0IHsKICAgICAgIyBUaGUgbnVtYmVyIG9mIGF0dGVtcHRzIHRvIHJ1biB0aGUgam9iIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGludGVydmFsLgogICAgICBhdHRlbXB0cyA9IDIKICAgICAgaW50ZXJ2YWwgPSAiMzBtIgoKICAgICAgIyBUaGUgImRlbGF5IiBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBkdXJhdGlvbiB0byB3YWl0IGJlZm9yZSByZXN0YXJ0aW5nCiAgICAgICMgYSB0YXNrIGFmdGVyIGl0IGhhcyBmYWlsZWQuCiAgICAgIGRlbGF5ID0gIjE1cyIKCiAgICAgICMgVGhlICJtb2RlIiBwYXJhbWV0ZXIgY29udHJvbHMgd2hhdCBoYXBwZW5zIHdoZW4gYSB0YXNrIGhhcyByZXN0YXJ0ZWQKICAgICAgIyAiYXR0ZW1wdHMiIHRpbWVzIHdpdGhpbiB0aGUgaW50ZXJ2YWwuICJkZWxheSIgbW9kZSBkZWxheXMgdGhlIG5leHQKICAgICAgIyByZXN0YXJ0IHVudGlsIHRoZSBuZXh0IGludGVydmFsLiAiZmFpbCIgbW9kZSBkb2VzIG5vdCByZXN0YXJ0IHRoZSB0YXNrCiAgICAgICMgaWYgImF0dGVtcHRzIiBoYXMgYmVlbiBoaXQgd2l0aGluIHRoZSBpbnRlcnZhbC4KICAgICAgbW9kZSA9ICJmYWlsIgogICAgfQoKICAgICMgVGhlICJlcGhlbWVyYWxfZGlzayIgc3RhbnphIGluc3RydWN0cyBOb21hZCB0byB1dGlsaXplIGFuIGVwaGVtZXJhbCBkaXNrCiAgICAjIGluc3RlYWQgb2YgYSBoYXJkIGRpc2sgcmVxdWlyZW1lbnQuIENsaWVudHMgdXNpbmcgdGhpcyBzdGFuemEgc2hvdWxkCiAgICAjIG5vdCBzcGVjaWZ5IGRpc2sgcmVxdWlyZW1lbnRzIGluIHRoZSByZXNvdXJjZXMgc3RhbnphIG9mIHRoZSB0YXNrLiBBbGwKICAgICMgdGFza3MgaW4gdGhpcyBncm91cCB3aWxsIHNoYXJlIHRoZSBzYW1lIGVwaGVtZXJhbCBkaXNrLgogICAgIwogICAgIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMgb24gdGhlICJlcGhlbWVyYWxfZGlzayIgc3RhbnphLCBwbGVhc2UKICAgICMgc2VlIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbiBhdDoKICAgICMKICAgICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL2VwaGVtZXJhbF9kaXNrLmh0bWwKICAgICMKICAgIGVwaGVtZXJhbF9kaXNrIHsKICAgICAgIyBXaGVuIHN0aWNreSBpcyB0cnVlIGFuZCB0aGUgdGFzayBncm91cCBpcyB1cGRhdGVkLCB0aGUgc2NoZWR1bGVyCiAgICAgICMgd2lsbCBwcmVmZXIgdG8gcGxhY2UgdGhlIHVwZGF0ZWQgYWxsb2NhdGlvbiBvbiB0aGUgc2FtZSBub2RlIGFuZAogICAgICAjIHdpbGwgbWlncmF0ZSB0aGUgZGF0YS4gVGhpcyBpcyB1c2VmdWwgZm9yIHRhc2tzIHRoYXQgc3RvcmUgZGF0YQogICAgICAjIHRoYXQgc2hvdWxkIHBlcnNpc3QgYWNyb3NzIGFsbG9jYXRpb24gdXBkYXRlcy4KICAgICAgIyBzdGlja3kgPSB0cnVlCiAgICAgICMKICAgICAgIyBTZXR0aW5nIG1pZ3JhdGUgdG8gdHJ1ZSByZXN1bHRzIGluIHRoZSBhbGxvY2F0aW9uIGRpcmVjdG9yeSBvZiBhCiAgICAgICMgc3RpY2t5IGFsbG9jYXRpb24gZGlyZWN0b3J5IHRvIGJlIG1pZ3JhdGVkLgogICAgICAjIG1pZ3JhdGUgPSB0cnVlCiAgICAgICMKICAgICAgIyBUaGUgInNpemUiIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIHNpemUgaW4gTUIgb2Ygc2hhcmVkIGVwaGVtZXJhbCBkaXNrCiAgICAgICMgYmV0d2VlbiB0YXNrcyBpbiB0aGUgZ3JvdXAuCiAgICAgIHNpemUgPSAzMDAKICAgIH0KCiAgICAjIFRoZSAiYWZmaW5pdHkiIHN0YW56YSBlbmFibGVzIG9wZXJhdG9ycyB0byBleHByZXNzIHBsYWNlbWVudCBwcmVmZXJlbmNlcwogICAgIyBiYXNlZCBvbiBub2RlIGF0dHJpYnV0ZXMgb3IgbWV0YWRhdGEuCiAgICAjCiAgICAjIEZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcyBvbiB0aGUgImFmZmluaXR5IiBzdGFuemEsIHBsZWFzZQogICAgIyBzZWUgdGhlIG9ubGluZSBkb2N1bWVudGF0aW9uIGF0OgogICAgIwogICAgIyAgICAgaHR0cHM6Ly93d3cubm9tYWRwcm9qZWN0LmlvL2RvY3Mvam9iLXNwZWNpZmljYXRpb24vYWZmaW5pdHkuaHRtbAogICAgIwogICAgIyBhZmZpbml0eSB7CiAgICAjIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSBub2RlIGF0dHJpYnV0ZSBvciBtZXRhZGF0YQogICAgIyBhdHRyaWJ1dGUgPSAiJHtub2RlLmRhdGFjZW50ZXJ9IgoKCiAgICAjIHZhbHVlIHNwZWNpZmllcyB0aGUgZGVzaXJlZCBhdHRyaWJ1dGUgdmFsdWUuIEluIHRoaXMgZXhhbXBsZSBOb21hZAogICAgIyB3aWxsIHByZWZlciBwbGFjZW1lbnQgaW4gdGhlICJ1cy13ZXN0MSIgZGF0YWNlbnRlci4KICAgICMgdmFsdWUgID0gInVzLXdlc3QxIgoKCiAgICAjIHdlaWdodCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSByZWxhdGl2ZSBwcmVmZXJlbmNlCiAgICAjIHdoZW4gdGhlIGpvYiBoYXMgbW9yZSB0aGFuIG9uZSBhZmZpbml0eS4gSXQgZGVmYXVsdHMgdG8gNTAgaWYgbm90IHNldC4KICAgICMgd2VpZ2h0ID0gMTAwCiAgICAjICB9CgoKICAgICMgVGhlICJzcHJlYWQiIHN0YW56YSBhbGxvd3Mgb3BlcmF0b3JzIHRvIGluY3JlYXNlIHRoZSBmYWlsdXJlIHRvbGVyYW5jZSBvZgogICAgIyB0aGVpciBhcHBsaWNhdGlvbnMgYnkgc3BlY2lmeWluZyBhIG5vZGUgYXR0cmlidXRlIHRoYXQgYWxsb2NhdGlvbnMKICAgICMgc2hvdWxkIGJlIHNwcmVhZCBvdmVyLgogICAgIwogICAgIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMgb24gdGhlICJzcHJlYWQiIHN0YW56YSwgcGxlYXNlCiAgICAjIHNlZSB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgICAjCiAgICAjICAgICBodHRwczovL3d3dy5ub21hZHByb2plY3QuaW8vZG9jcy9qb2Itc3BlY2lmaWNhdGlvbi9zcHJlYWQuaHRtbAogICAgIwogICAgIyBzcHJlYWQgewogICAgIyBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgbm9kZSBhdHRyaWJ1dGUgb3IgbWV0YWRhdGEKICAgICMgYXR0cmlidXRlID0gIiR7bm9kZS5kYXRhY2VudGVyfSIKCgogICAgIyB0YXJnZXRzIGNhbiBiZSB1c2VkIHRvIGRlZmluZSBkZXNpcmVkIHBlcmNlbnRhZ2VzIG9mIGFsbG9jYXRpb25zCiAgICAjIGZvciBlYWNoIHRhcmdldGVkIGF0dHJpYnV0ZSB2YWx1ZS4KICAgICMKICAgICMgICB0YXJnZXQgInVzLWVhc3QxIiB7CiAgICAjICAgICBwZXJjZW50ID0gNjAKICAgICMgICB9CiAgICAjICAgdGFyZ2V0ICJ1cy13ZXN0MSIgewogICAgIyAgICAgcGVyY2VudCA9IDQwCiAgICAjICAgfQogICAgIyAgfQoKICAgICMgVGhlICJ0YXNrIiBzdGFuemEgY3JlYXRlcyBhbiBpbmRpdmlkdWFsIHVuaXQgb2Ygd29yaywgc3VjaCBhcyBhIERvY2tlcgogICAgIyBjb250YWluZXIsIHdlYiBhcHBsaWNhdGlvbiwgb3IgYmF0Y2ggcHJvY2Vzc2luZy4KICAgICMKICAgICMgRm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzIG9uIHRoZSAidGFzayIgc3RhbnphLCBwbGVhc2Ugc2VlCiAgICAjIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbiBhdDoKICAgICMKICAgICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL3Rhc2suaHRtbAogICAgIwogICAgdGFzayAicmVkaXMiIHsKICAgICAgIyBUaGUgImRyaXZlciIgcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgdGFzayBkcml2ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0bwogICAgICAjIHJ1biB0aGUgdGFzay4KICAgICAgZHJpdmVyID0gImRvY2tlciIKCiAgICAgICMgVGhlICJjb25maWciIHN0YW56YSBzcGVjaWZpZXMgdGhlIGRyaXZlciBjb25maWd1cmF0aW9uLCB3aGljaCBpcyBwYXNzZWQKICAgICAgIyBkaXJlY3RseSB0byB0aGUgZHJpdmVyIHRvIHN0YXJ0IHRoZSB0YXNrLiBUaGUgZGV0YWlscyBvZiBjb25maWd1cmF0aW9ucwogICAgICAjIGFyZSBzcGVjaWZpYyB0byBlYWNoIGRyaXZlciwgc28gcGxlYXNlIHNlZSBzcGVjaWZpYyBkcml2ZXIKICAgICAgIyBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLgogICAgICBjb25maWcgewogICAgICAgIGltYWdlID0gInJlZGlzOjMuMiIKCiAgICAgICAgcG9ydF9tYXAgewogICAgICAgICAgZGIgPSA2Mzc5CiAgICAgICAgfQogICAgICB9CgogICAgICAjIFRoZSAiYXJ0aWZhY3QiIHN0YW56YSBpbnN0cnVjdHMgTm9tYWQgdG8gZG93bmxvYWQgYW4gYXJ0aWZhY3QgZnJvbSBhCiAgICAgICMgcmVtb3RlIHNvdXJjZSBwcmlvciB0byBzdGFydGluZyB0aGUgdGFzay4gVGhpcyBwcm92aWRlcyBhIGNvbnZlbmllbnQKICAgICAgIyBtZWNoYW5pc20gZm9yIGRvd25sb2FkaW5nIGNvbmZpZ3VyYXRpb24gZmlsZXMgb3IgZGF0YSBuZWVkZWQgdG8gcnVuIHRoZQogICAgICAjIHRhc2suIEl0IGlzIHBvc3NpYmxlIHRvIHNwZWNpZnkgdGhlICJhcnRpZmFjdCIgc3RhbnphIG11bHRpcGxlIHRpbWVzIHRvCiAgICAgICMgZG93bmxvYWQgbXVsdGlwbGUgYXJ0aWZhY3RzLgogICAgICAjCiAgICAgICMgRm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzIG9uIHRoZSAiYXJ0aWZhY3QiIHN0YW56YSwgcGxlYXNlIHNlZQogICAgICAjIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbiBhdDoKICAgICAgIwogICAgICAjICAgICBodHRwczovL3d3dy5ub21hZHByb2plY3QuaW8vZG9jcy9qb2Itc3BlY2lmaWNhdGlvbi9hcnRpZmFjdC5odG1sCiAgICAgICMKICAgICAgIyBhcnRpZmFjdCB7CiAgICAgICMgICBzb3VyY2UgPSAiaHR0cDovL2Zvby5jb20vYXJ0aWZhY3QudGFyLmd6IgogICAgICAjICAgb3B0aW9ucyB7CiAgICAgICMgICAgIGNoZWNrc3VtID0gIm1kNTpjNGFhODUzYWQyMjE1NDI2ZWI3ZDcwYTIxOTIyZTc5NCIKICAgICAgIyAgIH0KICAgICAgIyB9CgoKICAgICAgIyBUaGUgImxvZ3MiIHN0YW56YSBpbnN0cnVjdHMgdGhlIE5vbWFkIGNsaWVudCBvbiBob3cgbWFueSBsb2cgZmlsZXMgYW5kCiAgICAgICMgdGhlIG1heGltdW0gc2l6ZSBvZiB0aG9zZSBsb2dzIGZpbGVzIHRvIHJldGFpbi4gTG9nZ2luZyBpcyBlbmFibGVkIGJ5CiAgICAgICMgZGVmYXVsdCwgYnV0IHRoZSAibG9ncyIgc3RhbnphIGFsbG93cyBmb3IgZmluZXItZ3JhaW5lZCBjb250cm9sIG92ZXIKICAgICAgIyB0aGUgbG9nIHJvdGF0aW9uIGFuZCBzdG9yYWdlIGNvbmZpZ3VyYXRpb24uCiAgICAgICMKICAgICAgIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMgb24gdGhlICJsb2dzIiBzdGFuemEsIHBsZWFzZSBzZWUKICAgICAgIyB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgICAgICMKICAgICAgIyAgICAgaHR0cHM6Ly93d3cubm9tYWRwcm9qZWN0LmlvL2RvY3Mvam9iLXNwZWNpZmljYXRpb24vbG9ncy5odG1sCiAgICAgICMKICAgICAgIyBsb2dzIHsKICAgICAgIyAgIG1heF9maWxlcyAgICAgPSAxMAogICAgICAjICAgbWF4X2ZpbGVfc2l6ZSA9IDE1CiAgICAgICMgfQoKICAgICAgIyBUaGUgInJlc291cmNlcyIgc3RhbnphIGRlc2NyaWJlcyB0aGUgcmVxdWlyZW1lbnRzIGEgdGFzayBuZWVkcyB0bwogICAgICAjIGV4ZWN1dGUuIFJlc291cmNlIHJlcXVpcmVtZW50cyBpbmNsdWRlIG1lbW9yeSwgbmV0d29yaywgY3B1LCBhbmQgbW9yZS4KICAgICAgIyBUaGlzIGVuc3VyZXMgdGhlIHRhc2sgd2lsbCBleGVjdXRlIG9uIGEgbWFjaGluZSB0aGF0IGNvbnRhaW5zIGVub3VnaAogICAgICAjIHJlc291cmNlIGNhcGFjaXR5LgogICAgICAjCiAgICAgICMgRm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzIG9uIHRoZSAicmVzb3VyY2VzIiBzdGFuemEsIHBsZWFzZSBzZWUKICAgICAgIyB0aGUgb25saW5lIGRvY3VtZW50YXRpb24gYXQ6CiAgICAgICMKICAgICAgIyAgICAgaHR0cHM6Ly93d3cubm9tYWRwcm9qZWN0LmlvL2RvY3Mvam9iLXNwZWNpZmljYXRpb24vcmVzb3VyY2VzLmh0bWwKICAgICAgIwogICAgICByZXNvdXJjZXMgewogICAgICAgIGNwdSAgICA9IDUwMCAjIDUwMCBNSHoKICAgICAgICBtZW1vcnkgPSAyNTYgIyAyNTZNQgoKICAgICAgICBuZXR3b3JrIHsKICAgICAgICAgIG1iaXRzID0gMTAKICAgICAgICAgIHBvcnQgImRiIiB7fQogICAgICAgIH0KICAgICAgfQogICAgICAjIFRoZSAic2VydmljZSIgc3RhbnphIGluc3RydWN0cyBOb21hZCB0byByZWdpc3RlciB0aGlzIHRhc2sgYXMgYSBzZXJ2aWNlCiAgICAgICMgaW4gdGhlIHNlcnZpY2UgZGlzY292ZXJ5IGVuZ2luZSwgd2hpY2ggaXMgY3VycmVudGx5IENvbnN1bC4gVGhpcyB3aWxsCiAgICAgICMgbWFrZSB0aGUgc2VydmljZSBhZGRyZXNzYWJsZSBhZnRlciBOb21hZCBoYXMgcGxhY2VkIGl0IG9uIGEgaG9zdCBhbmQKICAgICAgIyBwb3J0LgogICAgICAjCiAgICAgICMgRm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzIG9uIHRoZSAic2VydmljZSIgc3RhbnphLCBwbGVhc2Ugc2VlCiAgICAgICMgdGhlIG9ubGluZSBkb2N1bWVudGF0aW9uIGF0OgogICAgICAjCiAgICAgICMgICAgIGh0dHBzOi8vd3d3Lm5vbWFkcHJvamVjdC5pby9kb2NzL2pvYi1zcGVjaWZpY2F0aW9uL3NlcnZpY2UuaHRtbAogICAgICAjCiAgICAgIHNlcnZpY2UgewogICAgICAgIG5hbWUgPSAicmVkaXMtY2FjaGUiCiAgICAgICAgdGFncyA9IFsiZ2xvYmFsIiwgImNhY2hlIl0KICAgICAgICBwb3J0ID0gImRiIgoKICAgICAgICBjaGVjayB7CiAgICAgICAgICBuYW1lICAgICA9ICJhbGl2ZSIKICAgICAgICAgIHR5cGUgICAgID0gInRjcCIKICAgICAgICAgIGludGVydmFsID0gIjEwcyIKICAgICAgICAgIHRpbWVvdXQgID0gIjJzIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=≠DefaultValuesÇ´datacentersÆ["dc1", "dc2"]Øsomething_crazyëÇ§name•hello•value•worldØBackpackVersion†